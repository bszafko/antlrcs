/*
 [The "BSD licence"]
 Copyright (c) 2009 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/** Recognize a single StringTemplate template text, expressions, and conditionals */
parser grammar TemplateParser;

options {
	language=CSharp3;
	tokenVocab=TemplateLexer;
	TokenLabelType=CommonToken;
}

@namespace{StringTemplate.Compiler}
@header{using System.Linq;}

@rulecatch {
   catch (RecognitionException) { throw; }
}

public
templateAndEOF
	:	template EOF
	;

// TODO: remove backtracking
public
template
	:	element*
	;

element
options {backtrack=true; k=2;}
	:	i=INDENT         {Indent($i.text);}
		ifOnOneLine      {gen.Emit(Bytecode.INSTR_DEDENT);}
	|	i=INDENT ifOnMultiLines
	|	ifOnMultiLines
	|	i=INDENT       	 {Indent($i.text);}
		exprTag          {gen.Emit(Bytecode.INSTR_DEDENT);}
	|	exprTag
	|	i=INDENT         {Indent($i.text);}
		text             {gen.Emit(Bytecode.INSTR_DEDENT);}
	|	text
	|   (i=INDENT {Indent($i.text);})? region
						 {
						 gen.Emit(Bytecode.INSTR_NEW, $region.name.FullName, $region.start.StartIndex, $region.start.StopIndex);
						 gen.Emit(Bytecode.INSTR_WRITE, $region.start.StartIndex, $region.stop.StartIndex);
						 }
	|	i=INDENT         {Indent($i.text);}
	 	NEWLINE          {gen.Emit(Bytecode.INSTR_NEWLINE);} 
	 	                 {gen.Emit(Bytecode.INSTR_DEDENT);}
	|	NEWLINE          {gen.Emit(Bytecode.INSTR_NEWLINE);}
	;

text
	:	TEXT
		{
		if ( $TEXT.text.Length>0 ) {
			gen.Emit(Bytecode.INSTR_LOAD_STR, $TEXT.text, $TEXT.StartIndex, $TEXT.StopIndex);
			gen.Emit(Bytecode.INSTR_WRITE, $TEXT.StartIndex, $TEXT.StopIndex);
		}
		}
	;

exprTag
	:	LDELIM
		expr
		(	';' exprOptions {gen.Emit(Bytecode.INSTR_WRITE_OPT, $LDELIM.StartIndex, input.LT(1).StartIndex);}
		|	                {gen.Emit(Bytecode.INSTR_WRITE, $LDELIM.StartIndex, input.LT(1).StartIndex);}
		)
		RDELIM
	;

region returns [TemplateName name] // match $@foo$...$@end$
	:	LDELIM '@' ID RDELIM
		{{ // force exec even when backtracking
		if (state.backtracking == 0)
			$name = gen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
		else
			$name = NoopGen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
		gen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
        }}
		LDELIM '@end' RDELIM
	;

subtemplate returns [TemplateName name]
	:	'{' ( ids+=ID (',' ids+=ID)* '|' )?
		{{ // force exec even when backtracking
		List<IToken> idTokens = null;
		if ($ids != null)
			idTokens = new List<IToken>($ids.Cast<IToken>());
		if (state.backtracking == 0)
			$name = gen.CompileAnonTemplate(_enclosingTemplateName, input, idTokens, state);
		else
			$name = NoopGen.CompileAnonTemplate(_enclosingTemplateName, input, idTokens, state);
        }}
        '}'
    ;

/** The (...)* loop in rule template doesn't think '}' can follow it because
 *  we call template in an action (via compileAnonTemplate).  To avoid
 *  syntax errors upon '}' in rule templatee, we force '}' into FOLLOW set.
 *  I hope to make ANTLR ignore FOLLOW set for (...)* in future.
 */
addTemplateEndTokensToFollowOfTemplateRule : template ('}' | LDELIM '@end') ;

ifOnMultiLines
@init {
    /** Tracks address of branch operand (in code block).  It's how
     *  we backpatch forward references when generating code for IFs.
     */
    int prevBranchOperand = -1;
    /** Branch instruction operands that are forward refs to end of IF.
     *  We need to update them once we see the endif.
     */
    List<int> endRefs = new List<int>();
}
	:	LDELIM 'if' '(' conditional ')' RDELIM
		{
        prevBranchOperand = gen.Address()+1;
        gen.Emit(Bytecode.INSTR_BRF, -1); // write placeholder as branch target
		}
		template
		(	INDENT? LDELIM 'elseif'
			{
			endRefs.Add(gen.Address()+1);
			gen.Emit(Bytecode.INSTR_BR, -1); // br end
			// update previous branch instruction
			gen.Write(prevBranchOperand, (short)gen.Address());
			prevBranchOperand = -1;
			}
			'(' conditional ')' RDELIM
			{
        	prevBranchOperand = gen.Address()+1;
        	gen.Emit(Bytecode.INSTR_BRF, -1); // write placeholder as branch target
			}
			template
		)*
		(	INDENT? LDELIM 'else' RDELIM
			{
			endRefs.Add(gen.Address()+1);
			gen.Emit(Bytecode.INSTR_BR, -1); // br end
			// update previous branch instruction
			gen.Write(prevBranchOperand, (short)gen.Address());
			prevBranchOperand = -1;
			}
			template
		)?
		INDENT? endif=LDELIM 'endif' RDELIM
		( {true}? NEWLINE )? // kill \on for <endif> on line by itself
		{
		if ( prevBranchOperand>=0 ) {
			gen.Write(prevBranchOperand, (short)gen.Address());
		}
        foreach (int opnd in endRefs) gen.Write(opnd, (short)gen.Address());
		}
	;

// TODO: code dup but need to call elementsForIfOnOneLine not template inside :(
ifOnOneLine
@init {
    /** Tracks address of branch operand (in code block).  It's how
     *  we backpatch forward references when generating code for IFs.
     */
    int prevBranchOperand = -1;
    /** Branch instruction operands that are forward refs to end of IF.
     *  We need to update them once we see the endif.
     */
    List<int> endRefs = new List<int>();
}
	:	LDELIM 'if' '(' conditional ')' RDELIM
		{
        prevBranchOperand = gen.Address()+1;
        gen.Emit(Bytecode.INSTR_BRF, -1); // write placeholder as branch target
		}
		elementsForIfOnOneLine*
		(	LDELIM 'elseif'
			{
			endRefs.Add(gen.Address()+1);
			gen.Emit(Bytecode.INSTR_BR, -1); // br end
			// update previous branch instruction
			gen.Write(prevBranchOperand, (short)gen.Address());
			prevBranchOperand = -1;
			}
			'(' conditional ')' RDELIM
			{
        	prevBranchOperand = gen.Address()+1;
        	gen.Emit(Bytecode.INSTR_BRF, -1); // write placeholder as branch target
			}
			elementsForIfOnOneLine*
		)*
		(	LDELIM 'else' RDELIM
			{
			endRefs.Add(gen.Address()+1);
			gen.Emit(Bytecode.INSTR_BR, -1); // br end
			// update previous branch instruction
			gen.Write(prevBranchOperand, (short)gen.Address());
			prevBranchOperand = -1;
			}
			elementsForIfOnOneLine*
		)?
		endif=LDELIM 'endif' RDELIM
		{
		if ( prevBranchOperand>=0 ) {
			gen.Write(prevBranchOperand, (short)gen.Address());
		}
        foreach (int opnd in endRefs) gen.Write(opnd, (short)gen.Address());
		}
	;
		
elementsForIfOnOneLine
	:	exprTag
	|	text
	|	ifOnOneLine
	;
	
conditional
	:	andConditional ('||' andConditional {gen.Emit(Bytecode.INSTR_OR);})*
	;
	
andConditional
	:	notConditional ('&&' notConditional {gen.Emit(Bytecode.INSTR_AND);})*
	;

notConditional
	:	'!' primary  {gen.Emit(Bytecode.INSTR_NOT);}
	|	primary
	;
	
exprOptions
	:	{gen.Emit(Bytecode.INSTR_OPTIONS);} option (',' option)*
	;

option
	:	ID ( '=' exprNoComma | {DefaultOption($ID);} )
		{SetOption($ID);}
	;
	
exprNoComma
	:	memberExpr ( ':' templateRef {gen.Emit(Bytecode.INSTR_MAP, $templateRef.start.StartIndex, $templateRef.start.StopIndex);} )?
	|	subtemplate {gen.Emit(Bytecode.INSTR_NEW, $subtemplate.name.FullName, $subtemplate.start.StartIndex, $subtemplate.start.StopIndex);}
	;

expr
	:	mapExpr
	|	// <{...}>
		subtemplate
		{
		var prefixed = PrefixedName($subtemplate.name);
		gen.Emit(Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $subtemplate.start.StartIndex, $subtemplate.stop.StopIndex);}
	;

mapExpr
@init {int nt=1, ne=1;}
	:	memberExpr (c=',' memberExpr {ne++;} )*
		(	':' templateRef
			(	(',' templateRef {nt++;})+  {gen.Emit(Bytecode.INSTR_ROT_MAP, nt);}
			|	{if ( $c!=null ) gen.Emit(Bytecode.INSTR_PAR_MAP, ne);
				 else gen.Emit(Bytecode.INSTR_MAP);}
			)
		)*
	;

memberExpr
	:	callExpr
		(	'.' ID {gen.Emit(Bytecode.INSTR_LOAD_PROP, $ID.text, $ID.StartIndex, $ID.StopIndex);}
		|	'.' lp='(' mapExpr rp=')' {gen.Emit(Bytecode.INSTR_LOAD_PROP_IND, $lp.StartIndex, $rp.StopIndex);}
		)*
	;
	
callExpr
options {k=2;} // prevent full LL(*), which fails, falling back on k=1; need k=2
	:	{TemplateCompiler.funcs.ContainsKey(input.LT(1).Text)}?
		ID '(' expr ')' {Func($ID);}
	|	(s='super' '.')? ID
		{
		var prefixed = PrefixedName(new TemplateName($ID.text));
		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $start.StartIndex, $ID.StopIndex);
		}
		'(' args? ')'
	|	'@' (s='super' '.')? ID '(' rp=')'	// convert <@r()> to <region__enclosingTemplate__r()>
		{
		TemplateName mangled = TemplateGroup.GetMangledRegionName(_enclosingTemplateName, $ID.text);
		gen.DefineBlankRegion(PrefixedName(mangled));
		var prefixed = PrefixedName(mangled);
		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $start.StartIndex, $rp.StartIndex);
		}
	|	primary
	;
	
primary
	:	o=ID	  {RefAttr($o);}
	|	STRING    {gen.Emit(Bytecode.INSTR_LOAD_STR, Misc.Strip($STRING.text,1), $STRING.StartIndex, $STRING.StopIndex);}
	|	list
	|	lp='(' expr rp=')' {gen.Emit(Bytecode.INSTR_TOSTR);}
		( {gen.Emit(Bytecode.INSTR_NEW_IND, $lp.StartIndex, $rp.StartIndex);} '(' args? ')' )? // indirect call
	;

args:	arg (',' arg)* ;

arg :	ID '=' exprNoComma {gen.Emit(Bytecode.INSTR_STORE_ATTR, $ID.text, $ID.StartIndex, $exprNoComma.stop.StopIndex);}
	|	exprNoComma        {gen.Emit(Bytecode.INSTR_STORE_SOLE_ARG, $exprNoComma.start.StartIndex, $exprNoComma.stop.StopIndex);}
	|	elip='...'		   {gen.Emit(Bytecode.INSTR_SET_PASS_THRU);}
	;

templateRef
	:	ID			{
					var prefixed = PrefixedName(new TemplateName($ID.text));
					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $ID.StartIndex, $ID.StopIndex);
					}
	|	subtemplate {
					var prefixed = PrefixedName($subtemplate.name);
					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $subtemplate.start.StartIndex, $subtemplate.start.StopIndex);
					}
	|	lp='(' mapExpr rp=')' {gen.Emit(Bytecode.INSTR_TOSTR, $lp.StartIndex, $rp.StartIndex);}
	;

list:	{gen.Emit(Bytecode.INSTR_LIST);} '[' listElement (',' listElement)* ']'
	|	{gen.Emit(Bytecode.INSTR_LIST);} '[' ']'
	;

listElement
    :   exprNoComma {gen.Emit(Bytecode.INSTR_ADD, $exprNoComma.start.StartIndex, $exprNoComma.stop.StopIndex);}
    ;
